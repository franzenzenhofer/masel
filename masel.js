// Generated by CoffeeScript 1.6.2
(function() {
  var $, decrypt, encrypt, fb, fetch_data, get_element_value, get_input, get_messageurl, get_output, get_password, if_not_set_error, init_input_with_url, init_url_to_copy, masel_decrypt, masel_encrypt, move_output_to_input, not_set_error, report_error, report_success, set_element_value, set_input, set_messageurl, set_output, tweet, x_crypt;

  $ = function(s) {
    if (s.charAt(0) === '#') {
      return [document.getElementById(s.substring(1))];
    } else {
      return document.querySelectorAll(s);
    }
  };

  console.log(window.document);

  report_error = function(msg) {
    return console.log(msg);
  };

  not_set_error = function(name) {
    return report_error(name + ' not set');
  };

  if_not_set_error = function(name, value) {
    if (!value) {
      return not_set_error(name);
    }
  };

  report_success = function(msg) {
    return console.log(msg);
  };

  get_element_value = function(query_selector) {
    var element_value, _ref, _ref1, _ref2;

    element_value = (_ref = (_ref1 = $(query_selector)) != null ? (_ref2 = _ref1[0]) != null ? _ref2.value.trim() : void 0 : void 0) != null ? _ref : false;
    if (element_value !== '' && element_value !== void 0 && element_value.length > 0) {
      return element_value;
    } else {
      return false;
    }
  };

  set_element_value = function(query_selector, data) {
    var $qs;

    $qs = $(query_selector);
    console.log($qs);
    if (!($qs != null ? $qs[0] : void 0)) {
      return false;
    }
    $qs[0].value = data;
    return true;
  };

  get_input = function() {
    return get_element_value('#input');
  };

  get_password = function() {
    return get_element_value('#password');
  };

  get_output = function() {
    return get_element_value('#output');
  };

  get_messageurl = function() {
    return get_element_value('#messageurl');
  };

  fetch_data = function() {
    return [get_input(), get_password(), get_output()];
  };

  set_output = function(data) {
    return set_element_value('#output', data);
  };

  set_input = function(data) {
    return set_element_value('#input', data);
  };

  set_messageurl = function(data) {
    return set_element_value('#messageurl', data);
  };

  init_url_to_copy = function(data) {
    if (data) {
      set_messageurl(window.document.location.protocol + '//' + window.document.location.host + window.document.location.pathname + '?' + encodeURIComponent(data));
      $('#messageurl')[0].focus();
      $('#messageurl')[0].select();
      $('#copy')[0].style.display = 'block';
      return true;
    } else {
      set_messageurl('');
      $('#copy')[0].style.display = 'none';
      return false;
    }
  };

  masel_encrypt = function(input, password) {
    var out;

    out = sjcl.encrypt(password, input, {
      "ks": 256
    });
    console.log(out);
    out = RawDeflate.deflate(out);
    return out = Base64.toBase64(out);
  };

  masel_decrypt = function(input, password) {
    var out;

    out = Base64.fromBase64(input);
    out = RawDeflate.inflate(out);
    return out = sjcl.decrypt(password, out, {
      "ks": 256
    });
  };

  x_crypt = function(modus) {
    var error, input, out, password, _ref;

    if (modus == null) {
      modus = 'en';
    }
    _ref = fetch_data(), input = _ref[0], password = _ref[1];
    if (input && password) {
      try {
        if (modus === 'en') {
          out = masel_encrypt(input, password);
        } else if (modus === 'de') {
          out = masel_decrypt(input, password);
        } else {
          report_error('modus' + modus + 'crypt not recognized');
        }
      } catch (_error) {
        error = _error;
        report_error(error);
        return false;
      }
      if (set_output(out)) {
        report_success('success ' + modus + 'crypt');
        if (modus === 'en') {
          return init_url_to_copy(out);
        } else {
          return init_url_to_copy(false);
        }
      } else {
        return report_error(modus + 'crypt did not work');
      }
    } else {
      if_not_set_error('input', input);
      return if_not_set_error('password', password);
    }
  };

  move_output_to_input = function() {
    var output, _notused, _ref;

    _ref = fetch_data(), _notused = _ref[0], _notused = _ref[1], output = _ref[2];
    set_input(output || '');
    set_output('');
    init_url_to_copy(false);
    return true;
  };

  init_input_with_url = function() {
    var data, _ref, _ref1;

    data = decodeURIComponent((_ref = window.location) != null ? (_ref1 = _ref.search) != null ? _ref1.replace(/^(#|\?)/, '') : void 0 : void 0);
    if (data) {
      set_input(data);
      set_output('');
      init_url_to_copy(false);
      $('#password')[0].focus();
      return true;
    } else {
      $('#input')[0].focus();
      return false;
    }
  };

  encrypt = function() {
    return x_crypt('en');
  };

  decrypt = function() {
    return x_crypt('de');
  };

  tweet = function() {
    return window.document.location = 'http://twitter.com/intent/tweet?text=' + encodeURIComponent('MASEL Encrypted Message') + '&url=' + encodeURIComponent(get_messageurl());
  };

  fb = function() {
    return window.document.location = 'https://www.facebook.com/sharer.php?u=' + encodeURIComponent(get_messageurl()) + '&t=' + encodeURIComponent('MASEL Encrypted Message');
  };

  $('#encrypt')[0].addEventListener('click', encrypt);

  $('#decrypt')[0].addEventListener('click', decrypt);

  $('#output')[0].addEventListener('click', (function() {
    return $('#output')[0].select();
  }));

  $('#messageurl')[0].addEventListener('click', (function() {
    return $('#messageurl')[0].select();
  }));

  $('#up')[0].addEventListener('click', move_output_to_input);

  $('#gotourl')[0].addEventListener('click', (function() {
    if (get_messageurl()) {
      return window.document.location = get_messageurl() || '#';
    }
  }));

  $('#tweet')[0].addEventListener('click', tweet);

  $('#fb')[0].addEventListener('click', fb);

  window.addEventListener('load', init_input_with_url);

}).call(this);
